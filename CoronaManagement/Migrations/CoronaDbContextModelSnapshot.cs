// <auto-generated />
using System;
using CoronaManagement.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoronaManagement.Migrations
{
    [DbContext(typeof(CoronaDbContext))]
    partial class CoronaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoronaManagement.Models.CoronaDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfPositiveTest")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RecoveryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Vaccinations");
                });

            modelBuilder.Entity("CoronaManagement.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellphoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVaccinated")
                        .HasColumnType("bit");

                    b.Property<string>("LestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("CoronaManagement.Models.VaccinationDates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CoronaDetailsId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfFirstVaccination")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfFourthVaccination")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfSecondtVaccination")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfThirdVaccination")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoronaDetailsId");

                    b.ToTable("VaccinationDates");
                });

            modelBuilder.Entity("CoronaManagement.Models.VaccinationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CoronaDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerOfFirstVaccination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturerOfFourthVaccination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturerOfSecondtVaccination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturerOfThirdVaccination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoronaDetailsId");

                    b.ToTable("VaccinationInfo");
                });

            modelBuilder.Entity("CoronaManagement.Models.CoronaDetails", b =>
                {
                    b.HasOne("CoronaManagement.Models.Patient", null)
                        .WithMany("CoronaDetails")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("CoronaManagement.Models.VaccinationDates", b =>
                {
                    b.HasOne("CoronaManagement.Models.CoronaDetails", null)
                        .WithMany("VaccinationDates")
                        .HasForeignKey("CoronaDetailsId");
                });

            modelBuilder.Entity("CoronaManagement.Models.VaccinationInfo", b =>
                {
                    b.HasOne("CoronaManagement.Models.CoronaDetails", null)
                        .WithMany("VaccinationInfo")
                        .HasForeignKey("CoronaDetailsId");
                });

            modelBuilder.Entity("CoronaManagement.Models.CoronaDetails", b =>
                {
                    b.Navigation("VaccinationDates");

                    b.Navigation("VaccinationInfo");
                });

            modelBuilder.Entity("CoronaManagement.Models.Patient", b =>
                {
                    b.Navigation("CoronaDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
